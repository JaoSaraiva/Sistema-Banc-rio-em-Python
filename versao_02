from datetime import datetime

# Classe para representar um usuário
class Usuario:
    def __init__(self, nome, data_nascimento, cpf, endereco):
        self.nome = nome
        self.data_nascimento = data_nascimento
        self.cpf = cpf
        self.endereco = endereco

# Classe para representar uma conta bancária
class ContaBancaria:
    numero_conta_sequencial = 1  # Número da conta inicia em 1

    def __init__(self, agencia, usuario):
        self.numero_conta = ContaBancaria.numero_conta_sequencial
        self.agencia = agencia
        self.usuario = usuario
        self.saldo = 0
        self.depositos = []  # Armazena os depósitos
        self.saques = []  # Armazena os saques
        self.saques_diarios = 0  # Contador de saques diários
        ContaBancaria.numero_conta_sequencial += 1  # Incrementa o número da conta para a próxima

    def exibir_saldo(self):
        print(f"Saldo da conta {self.numero_conta} ({self.usuario.nome}): R$ {self.saldo:.2f}")

    def depositar(self, valor):
        self.saldo += valor
        self.depositos.append((datetime.now(), valor))  # Armazena o depósito com data e valor
        print(f"Depósito de R$ {valor:.2f} realizado com sucesso!")

    def sacar(self, valor):
        if self.saques_diarios >= 3:
            print("Limite de 3 saques diários atingido.")
        elif valor > 500:
            print("O valor máximo permitido por saque é de R$ 500.00.")
        elif valor > self.saldo:
            print("Saldo insuficiente, não foi possível realizar a operação.")
        else:
            self.saldo -= valor
            self.saques.append((datetime.now(), valor))  # Armazena o saque com data e valor
            self.saques_diarios += 1
            print(f"Saque de R$ {valor:.2f} realizado com sucesso!")

    def exibir_extrato(self):
        print("\n==========Extrato da conta============")
        print("Depósitos:")
        for data, valor in self.depositos:
            print(f"Data: {data.strftime('%d/%m/%Y %H:%M:%S')} - Valor: R$ {valor:.2f}")
        
        print("\nSaques:")
        for data, valor in self.saques:
            print(f"Data: {data.strftime('%d/%m/%Y %H:%M:%S')} - Valor: R$ {valor:.2f}")
        
        self.exibir_saldo()
    
    def resetar_saques_diarios(self):
        """Reseta o contador de saques diários (chame essa função no início de cada dia)"""
        self.saques_diarios = 0

# Função para criar um usuário
def criar_usuario(usuarios):
    nome = input("Digite o nome do usuário: ")
    data_nascimento = input("Digite a data de nascimento (dd/mm/aaaa): ")
    cpf = input("Digite o CPF: ")
    
    # Verifica se o CPF já está cadastrado
    for usuario in usuarios:
        if usuario.cpf == cpf:
            print("Erro: CPF já cadastrado.")
            return None
    
    endereco = input("Digite o endereço (logradouro, numero - bairro - cidade/UF): ")
    
    # Cria e armazena o novo usuário
    novo_usuario = Usuario(nome, data_nascimento, cpf, endereco)
    usuarios.append(novo_usuario)
    print(f"Usuário {nome} criado com sucesso!")
    return novo_usuario

# Função para criar uma conta vinculada a um usuário já existente
def criar_conta_corrente(contas, usuarios):
    cpf = input("Digite o CPF do usuário para vincular a nova conta: ")
    
    # Busca o usuário pelo CPF
    usuario_encontrado = None
    for usuario in usuarios:
        if usuario.cpf == cpf:
            usuario_encontrado = usuario
            break
    
    if usuario_encontrado is None:
        print("Erro: Usuário com este CPF não encontrado.")
        return
    
    # Cria a nova conta vinculada ao usuário
    agencia = "0001"  # Agência fixa
    nova_conta = ContaBancaria(agencia, usuario_encontrado)
    contas.append(nova_conta)
    print(f"Conta {nova_conta.numero_conta} criada com sucesso para o usuário {usuario_encontrado.nome}!")

# Função para listar todas as contas cadastradas
def listar_contas(contas):
    if not contas:
        print("Nenhuma conta cadastrada.")
        return

    print("\nContas cadastradas:")
    for conta in contas:
        print(f"Agência: {conta.agencia} | Número da conta: {conta.numero_conta} | Titular: {conta.usuario.nome} (CPF: {conta.usuario.cpf})")

# Função para exibir o menu principal e interagir com o sistema
def menu_principal():
    usuarios = []
    contas = []
    
    while True:
        print("\nMenu Principal:")
        print("1 - Criar usuário")
        print("2 - Criar conta corrente")
        print("3 - Acessar conta corrente")
        print("4 - Listar contas cadastradas")
        print("5 - Sair")
        opcao = input("Escolha uma opção: ")

        if opcao == '1':
            criar_usuario(usuarios)
        elif opcao == '2':
            criar_conta_corrente(contas, usuarios)
        elif opcao == '3':
            acessar_conta_corrente(contas)
        elif opcao == '4':
            listar_contas(contas)
        elif opcao == '5':
            print("Obrigado por usar nosso sistema!")
            break
        else:
            print("Opção inválida! Tente novamente.")

# Função para acessar e operar uma conta corrente
def acessar_conta_corrente(contas):
    numero_conta = int(input("Digite o número da conta: "))
    
    # Busca a conta pelo número
    conta_encontrada = None
    for conta in contas:
        if conta.numero_conta == numero_conta:
            conta_encontrada = conta
            break
    
    if conta_encontrada is None:
        print("Erro: Conta não encontrada.")
        return
    
    # Exibe o menu de opções da conta
    menu_conta(conta_encontrada)

# Função para exibir o menu da conta corrente
def menu_conta(conta):
    while True:
        print("\nMenu de Opções da Conta:")
        print("1 - Exibir saldo")
        print("2 - Depósito")
        print("3 - Saque")
        print("4 - Exibir extrato")
        print("5 - Sair")
        opcao = input("Escolha uma opção: ")

        if opcao == '1':
            conta.exibir_saldo()
        elif opcao == '2':
            valor = float(input("Digite o valor do depósito: "))
            conta.depositar(valor)
        elif opcao == '3':
            valor = float(input("Digite o valor do saque: "))
            conta.sacar(valor)
        elif opcao == '4':
            conta.exibir_extrato()
        elif opcao == '5':
            print("Retornando ao menu principal.")
            break
        else:
            print("Opção inválida! Tente novamente.")

# Inicia o sistema
menu_principal()
